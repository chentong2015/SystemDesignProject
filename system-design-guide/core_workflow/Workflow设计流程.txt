TODO. 1. Requirements Gathering
1. Support Web and Mobile UI ?
2. We don't need to login for searching, but booking ?
3. Support to find/view scheduled appointments
4. availability=3? Search from today to 3 days later

Functional Requirements:
   - Core Services or APIs
   - Main features of the system
Non-functional requirements:
   - Low latency: searching less than 1s
   - High available: user can access services at anytime and from everywhere
   - High reliable(safety): all use data will never be lost
   - High consistent: share data between mobile and web ?

TODO. 2. Capacity Estimation and Constraints
 Math 数据计算: API服务需要支撑多大的并发量 + 需要多大的数据存储空间
1. The amount of traffic the system should handle / lot of users/data
2. The amount of data the system should work with
3. what availability is expected
4. what response times are tolerable / low-latency
> Request Estimation 用户请求量的估计
> Table Estimation 数据表存储的估计

TODO. 3. High-level Design 系统整体的框架
- UI Layer
- Backend Service layer
- Underlying Database layer

TODO. 4. Deep into system 完善框架细节，自顶向下设计
- Load Balancer
- REST API / Data Model
- Caching Layer
- DB Schema / DB backup

TODO. 5. Scalability / Optimization 探讨系统分布式扩展性
- Reliability: 系统必须具备可靠性
- Scalability: 分布式系统的服务可扩展性
- Hash Consistent: 分布式系统的数据一致性
- DB Duplication / Data Sharding 拆分和备份问题
- Monitoring: 服务的监控

TODO. 6. Trade-off & Known Issues + bottlenecks技术瓶颈
(time, budget, knowledge, complexity, technologies currently available, etc.)